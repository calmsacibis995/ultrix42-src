.\" SCCSID: @(#)fs.5	8.1	9/11/90
.TH fs 5
.SH Name
fs, inode \- format of file system volume
.SH Syntax
.B #include <sys/types.h>
.br
.B #include <sys/fs.h>
.br
.B #include <sys/inode.h>
.NXR "file system" "format"
.NXR "file system" "volume"
.NXR "fs"
.NXR "file" "format"
.SH Description
Every file system storage volume (disk, 9-track tape, for instance)
has a common format for certain vital information.
Every such volume is divided into a certain number of blocks.
The block size is a parameter of the file system.
Sectors 0 to 15 on a file system are used to contain primary
and secondary bootstrapping programs.
.PP
The actual file system begins at sector 16 with the
.I "super block."
The layout of the super block as defined by the include file
.RI < sys/fs.h >
is:
.PP
.nf
#define	FS_MAGIC	0x011954
struct	fs {
	struct	fs *fs_link;		/* linked list of file systems */
	struct	fs *fs_rlink;		/* used for incore super blocks */
	daddr_t	fs_sblkno;		/* addr of super block in filesys */
	daddr_t	fs_cblkno;		/* offset of cyl-block in filesys */
	daddr_t	fs_iblkno;		/* offset of inode-blocks in filesys */
	daddr_t	fs_dblkno;		/* offset of first data after cg */
	long	fs_cgoffset;		/* cylinder group offset in cylinder */
	long	fs_cgmask;		/* used to calc mod fs_ntrak */
	time_t 	fs_time;    		/* last time written */
	long	fs_size;			/* number of blocks in fs */
	long	fs_dsize;		/* number of data blocks in fs */
	long	fs_ncg;			/* number of cylinder groups */
	long	fs_bsize;		/* size of basic blocks in fs */
	long	fs_fsize;		/* size of frag blocks in fs */
	long	fs_frag;			/* number of frags in a block in fs */
/* these are configuration parameters */
	long	fs_minfree;		/* minimum percentage of free blocks */
	long	fs_rotdelay;		/* num of ms for optimal next block */
	long	fs_rps;			/* disk revolutions per second */
/* these fields can be computed from the others */
	long	fs_bmask;		/* ``blkoff'' calc of blk offsets */
	long	fs_fmask;		/* ``fragoff'' calc of frag offsets */
	long	fs_bshift;		/* ``lblkno'' calc of logical blkno */
	long	fs_fshift;		/* ``numfrags'' calc number of frags */
/* these are configuration parameters */
	long	fs_maxcontig;		/* max number of contiguous blks */
	long	fs_maxbpg;		/* max number of blks per cyl group */
/* these fields can be computed from the others */
	long	fs_fragshift;		/* block to frag shift */
	long	fs_fsbtodb;		/* fsbtodb and dbtofsb shift constant */
	long	fs_sbsize;		/* actual size of super block */
	long	fs_csmask;		/* csum block offset */
	long	fs_csshift;		/* csum block number */
	long	fs_nindir;		/* value of NINDIR */
	long	fs_inopb;		/* value of INOPB */
	long	fs_nspf;			/* value of NSPF */
	long	fs_sparecon[6];		/* reserved for future constants */
/* sizes determined by number of cylinder groups and their sizes */
	daddr_t fs_csaddr;		/* blk addr of cyl grp summary area */
	long	fs_cssize;		/* size of cyl grp summary area */
	long	fs_cgsize;		/* cylinder group size */
/* these fields should be derived from the hardware */
	long	fs_ntrak;		/* tracks per cylinder */
	long	fs_nsect;		/* sectors per track */
	long  	fs_spc;   		/* sectors per cylinder */
/* this comes from the disk driver partitioning */
	long	fs_ncyl;   		/* cylinders in file system */
/* these fields can be computed from the others */
	long	fs_cpg;			/* cylinders per group */
	long	fs_ipg;			/* inodes per group */
	long	fs_fpg;			/* blocks per group * fs_frag */
/* this data must be recomputed after crashes */
	struct	csum fs_cstotal;		/* cylinder summary information */
/* these fields are cleared at mount time */
	char   	fs_fmod;    		/* super block modified flag */
	char   	fs_clean;    		/* file system is clean flag */
	char   	fs_ronly;   		/* mounted read-only flag */
	char   	fs_flags;   		/* currently unused flag */
	char	fs_fsmnt[MAXMNTLEN];	
					/* name mounted on */
/* these fields retain the current block allocation info */
	long	fs_cgrotor;		/* last cg searched */
	struct	csum *fs_csp[MAXCSBUFS];
					/* list of fs_cs info buffers */
	long	fs_cpc;			/* cyl per cycle in postbl */
	short	fs_postbl[MAXCPG][NRPOS];
					/* head of blocks for each rotation */
	long	fs_magic;		/* magic number */
	u_char	fs_rotbl[1];		/* list of blocks for each rotation */
/* actually longer */
};
.fi
.PP
Each disk drive contains some number of file systems.
A file system consists of a number of cylinder groups.
Each cylinder group has inodes and data.
.PP
A file system is described by its super block, which in turn
describes the cylinder groups.  The super block is critical
data and is replicated in each cylinder group to protect against
catastrophic loss.  This is done at file system creation
time and the critical
super block data does not change, so the copies need not be
referenced further unless disaster strikes.
.PP
Addresses stored in inodes are capable of addressing fragments
of ``blocks''. File system blocks of at most size MAXBSIZE can 
be optionally broken into 2, 4, or 8 pieces, each of which is
addressable; these pieces can be DEV_BSIZE or some multiple of
a DEV_BSIZE unit.
.PP
Large files consist of exclusively large data blocks.  To avoid
undue wasted disk space, the last data block of a small file is
allocated only as many fragments of a large block as are
necessary.  The file system format retains only a single pointer
to such a fragment, which is a piece of a single large block that
has been divided.  The size of such a fragment is determinable from
information in the inode, using the ``blksize(fs, ip, lbn)'' macro.
.PP
The file system records space availability at the fragment level;
to determine block availability, aligned fragments are examined.
.PP
The root inode is the root of the file system.
Inode 0 cannot be used for normal purposes and
historically bad blocks were linked to inode 1;
thus the root inode is 2. (Although inode 1 is no longer used for
this purpose, numerous dump tapes make this
assumption.)
The
.I lost+found
directory is given the next available
inode when it is initially created by
.IR mkfs .
.PP
.I fs_minfree
gives the minimum acceptable percentage of file system
blocks that may be free. If the freelist drops below this level,
only the superuser can continue to allocate blocks. This can
be set to 0 if no reserve of free blocks is deemed necessary;
however, severe performance degradations will be observed if the
file system is run at greater than 90% full. Thus, the default
value of
.I fs_minfree
is 10%.
.PP
Empirically the best trade-off between block fragmentation and
overall disk utilization at a loading of 90% comes with a
fragmentation of 4. Thus, the default fragment size is a fourth
of the block size.
.PP
.I Cylinder group related
.IR limits :
Each cylinder keeps track of the availability of blocks at different
rotational positions, so that sequential blocks can be laid out
with minimum rotational latency.  NRPOS is the number of rotational
positions which are distinguished.  With NRPOS 8, the resolution of the
summary information is 2ms for a typical 3600 rpm drive.
.PP
.I fs_rotdelay
gives the minimum number of milliseconds to initiate
another disk transfer on the same cylinder.  It is used in
determining the rotationally optimal layout for disk blocks
within a file; the default value for
.I fs_rotdelay
is 2ms.
.PP
Each file system has a statically allocated number of inodes.
An inode is allocated for each NBPI bytes of disk space.
The inode allocation strategy is extremely conservative.
.PP
MAXIPG bounds the number of inodes per cylinder group and
is needed only to keep the structure simpler by having the
only a single variable size element (the free bit map).
MAXIPG must be a multiple of INOPB(fs).
.PP
MINBSIZE is the smallest allowable block size.
With a MINBSIZE of 4096,
it is possible to create files of size
2^32 with only 2 levels of indirection.
MINBSIZE must be big enough to hold a cylinder group block,
so changes to (struct cg) must keep its size within MINBSIZE.
MAXCPG is limited only to the dimension of an array given in (struct cg);
it can be made larger as long as that structure's size remains
within the bounds dictated by MINBSIZE.
Note that super blocks are never more than size SBSIZE.
.PP
The path name on which the file system is mounted is maintained
in
.IR fs_fsmnt .
MAXMNTLEN defines the amount of space allocated in 
the super block for this name.
The limit on the amount of summary information per file system
is defined by MAXCSBUFS. It is currently parameterized for a
maximum of 2,000,000 cylinders.
.PP
Per cylinder group information is summarized in blocks allocated
from the first cylinder group's data blocks. 
These blocks are read in from
.I fs_csaddr
(size
.IR fs_cssize )
in addition to the super block.
sizeof (struct csum) must be a power of 2 in order for
the ``fs_cs'' macro to work.
.PP
.I Super block for a file
.IR system :
MAXBPC bounds the size of the rotational layout tables and
is limited by the fact that the super block is of size SBSIZE.
The size of these tables is
inversely proportional to the block
size of the file system. The size of the tables is
increased when sector sizes are not powers of 2,
as this increases the number of cylinders
included before the rotational pattern repeats (
.IR fs_cpc ).
The size of the rotational layout
tables is derived from the number of bytes remaining in (struct fs).
.PP
MAXBPG bounds the number of blocks of data per cylinder group,
and is limited by the fact that cylinder groups are at most one block.
The size of the free block table
is derived from the size of blocks and the number
of remaining bytes in the cylinder group structure (struct cg).
.PP
.IR Inode :
The inode is the focus of all file activity in the
UNIX file system.  There is a unique inode allocated
for each active file,
each current directory, each mounted-on file,
text file, and the root.
An inode is `named' by its device/i-number pair.
For further information, see the include file
.RI < sys/inode.h >.
