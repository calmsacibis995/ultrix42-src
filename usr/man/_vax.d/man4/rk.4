.\" SCCSID: @(#)rk.4	8.1	9/11/90
.TH rk 4 VAX
.SH Name
rk \- RK711/RK07 disk interface
.SH Syntax
.B "controller hk0 at uba? csr 0177440 vector rkintr"
.br
.B "disk rk0 at hk0 drive 0"
.SH Description
.NXS "rk interface" "RK711 disk interface"
.NXS "rk interface" "RK07 disk interface"
.NXS "hk interface" "RK711 disk interface"
.NXS "hk interface" "RK07 disk interface"
.NXR "RK711 disk interface"
.NXR "RK07 disk interface"
Files with minor device numbers 0 through 7 refer to various portions
of drive 0;
minor devices 8 through 15 refer to drive 1, and so forth.
The standard device names begin with ``hk'' followed by
the drive number and then a letter, a through h, for
partitions 0 through 7.
The question mark (?) character stands here for a drive number in the range
0 through 7.
.PP
The block files access the disk using the system's normal
buffering mechanism and can be read and written, without regard to
physical disk records.	There is also a raw interface
that provides for direct transmission between the disk
and the user's read or write buffer.
A single read or write call results in exactly one I/O operation.
Therefore, raw I/O is considerably more efficient when
many words are transmitted.  The names of the raw files
conventionally begin with an additional letter r, for example,
.PN rrx2c .
.PP
In raw I/O, counts should be multiples of 512 bytes (a disk sector).
In the same way,
.PN seek
calls should specify a multiple of 512 bytes.
.PP
The origin and size (in sectors) of the
pseudodisks on each drive are as follows:
.PP
.NXR "RK07 disk" "pseudodisk partitions"
.nf
.ta .5i +\w'000000    'u +\w'000000    'u +\w'000000	'u
RK07 partitions:
	disk	start	length	cyl

	rk?a	0	15884	0-240
	rk?b	15906	10032	241-392
	rk?c	0	53790	0-814
	rk?g	26004	27786	393-813
.DT
.fi
.PP
.SH Restrictions
In raw I/O,
.PN read
and
.PN write
functions truncate file offsets to 512-byte block boundaries;
.PN write
overwrites the tail of incomplete blocks.
Thus,
in programs that are likely to access raw devices,
.MS read 2 ,
.MS write 2 ,
and
.MS lseek 2
should always deal in 512-byte multiples.
.SH Diagnostics
The following messages are printed at the console:
.PP
.B "rk%d%c: hard error sn%d"
.br
An unrecoverable error occurred during transfer of the
specified sector of the specified disk partition.
Either the error was unrecoverable, or a large number of retry attempts
(including offset positioning and drive recalibration) could not
recover the error.  Additional register information can be
gathered from the system error log file,
\f(CW/usr/adm/syserr/syserr.\fI<hostname>\fR.
.PP
.B "rk%d: write locked"
.br
The write protect switch was set on the drive when
a write was attempted.
The write operation is not recoverable.
.PP
.B "rk%d: not ready"
.br
The drive was spun down or off line when it was
accessed.
The I/O operation is not recoverable.
.PP
.B "rk%d: not ready (came back!)"
.br
The drive was not ready.
But, after printing this message (which takes a fraction
of a second), it was ready.
The operation is recovered, if no further errors occur.
.PP
.B "hk%d: lost interrupt"
.br
A timer watching the controller detected no interrupt for
an extended period while an operation was outstanding.
This indicates a hardware or software failure.
Spinning down drives while they are being accessed causes this
error to occur.
The error causes a UNIBUS reset and retry of the pending operations.
If the controller continues to lose interrupts, this error will recur
a few seconds later.
.PP
.B "rk%d%c: soft ecc sn%d"
.br
This message is written to the system error log file only.
A recoverable ECC error occurred on the specified sector
in the specified disk partition.
This happens normally a few times a week.
If it happens more frequently than this,
the sectors where the errors are occurring should be checked to see
if the same physical location on the disk pack is causing the error. 
Errors in the same area on the disk pack indicate the pack is going bad.  
Random errors can be caused by a pack going bad or a pending hardware 
problem.  
.SH Files
.PN /dev/rk???
.br
.PN /dev/rrk???
.SH See Also
dkio(4), nbuf(4), MAKEDEV(8), uerf(8)
