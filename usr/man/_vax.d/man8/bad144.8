.\" SCCSID: @(#)bad144.8	8.1	9/11/90
.TH bad144 8 VAX
.SH Name
bad144 \- read/write DEC Standard 144 bad sector information
.SH Syntax
.B /etc/bad144
[
.B \-f
]
disktype disk
[ sno [
bad ...
] ]
.SH Description
.NXR "bad144 command"
.NXA "bad144 command" "badsect program"
.NXR "bad sector" "reporting"
The
.PN bad144
command
can be used to inspect the information stored on a disk that is used by
the disk drivers to implement bad sector forwarding.  The format of
the information is specified by DEC Standard 144, as follows.
.PP
The bad sector information is located
in the first five even numbered sectors
of the last track of the disk pack.  There are five identical copies of
the information, described by the
.I dkbad
structure.
.PP
Replacement sectors are allocated starting with the first sector before
the bad sector information and working backwards towards the beginning
of the disk.  A maximum of 126 bad sectors are supported.  The position
of the bad sector in the bad sector table determines which replacement
sector it corresponds to.
The bad sectors must be listed in ascending order.
.PP
The bad sector information and replacement sectors are conventionally
only accessible through the ``c'' file system partition of the disk.  If
that partition is used for a file system, the user is responsible for
making sure that it does not overlap the bad sector information or any
replacement sectors.
.PP
The bad sector structure is as follows:
.NXR(e) "bad ssector" "structure"
.PP
.EX 
struct dkbad {
long         bt_csn;       /* cartridge serial number */
 u_short     bt_mbz;       /* unused; should be 0 */
 u_short     bt_flag;      /* \-1 => alignment cartridge */
 struct bt_bad {
        u_short bt_cyl;    /* cylinder number of bad sector */
        u_short bt_trksec; /* track and sector number */
 } bt_bad[126];
};
.EE
.PP
Unused slots in the
.I bt_bad
array are filled with all bits set, an accepted
illegal value.
.PP
The
.PN bad144
command is invoked by giving a device type
(for example, rk07, rm03, rm05, and so forth), and a device
name (for example, hk0, hp1, and so forth).
It reads the first sector of the last track
of the corresponding disk and prints out the bad sector information.
It may also be invoked giving a serial number for the pack and a list
of bad sectors, and will then write the supplied information onto the
same location.  Note, however, that 
.PN bad144
does not arrange for the specified
sectors to be marked bad in this case.
This option should only be used to restore
known bad sector information which was destroyed.
It is necessary to reboot before the change will take effect.
.PP
If the disk is an RP06, Fujitsu Eagle,
or Ampex Capricorn on a Massbus, the
.B \-f
option may be used to mark the bad sectors as ``bad''.
This can only be done safely when there is no other disk activity,
preferably while running single-user.
Otherwise,
new bad sectors can be added only
by running a formatter.
Note that the order in which the sectors are
listed determines which sectors
used for replacements.  
If new sectors are being inserted into the list on a
drive that is in use, care should be taken that replacements for
existing bad sectors have the correct contents.
.SH Restrictions
On an 11/750,
the standard bootstrap drivers used to boot the system do
not understand bad sectors,
handle ECC errors,
or the special SSE (skip sector) errors of RM80 type disks.
This means that none of these errors can occur when
reading the file /vmunix to boot.  Sectors 0-15 of the disk drive
must also not have any of these errors.
.PP
The drivers which write a system core image on disk after a crash do not
handle errors. 
Thus the crash dump area must be free of errors and bad sectors.
.SH See Also
badsect(8), format(8v)
