.\" SCCSID: @(#)ftw.3	8.2	3/28/91
.TH ftw 3
.SH Name
ftw \- walk a file tree
.SH Syntax
.B #include <ftw.h>
.PP
.B int ftw (\fIpath, fn, depth\fP)
.br
.B char *\fIpath\fP;
.br
.B int (*\fIfn) ( )\fP;
.br
.B int \fIdepth\fP;
.SH Description
.NXR "ftw subroutine"
.NXR "directory" "descending tree"
The
.PN ftw
subroutine recursively descends the directory hierarchy
rooted in
.IR path .
For each object in the hierarchy,
.PN ftw
calls
.IR fn ,
passing it a pointer to a null-terminated
character string containing the name of the object,
a pointer to a
.B stat
structure
containing information about the object, and an integer.
For further information, see 
.MS stat 2 .
Possible values of the integer, defined in the <ftw.h> header file,
are FTW_F for a file, FTW_D for a directory, FTW_DNR for
a directory that cannot be read, and FTW_NS for an object
for which
.B stat
could not successfully be executed.
If the integer is FTW_DNR,
descendants of that directory will not be processed.
If the integer is FTW_NS, the the contents of the
.B stat
structure will be undefined. 
An example of an object that would cause
FTW_NS to be passed to
.I fn\^
would be a file in a directory
with read but without execute (search) permission.
.PP
The
.PN ftw
subroutine visits a directory before visiting any of its descendants.
.PP
The tree traversal continues until the tree is exhausted,
an invocation of
.I fn\^
returns a nonzero value,
or some error is detected within
.PN ftw
(such as an I/O error).
If the tree is exhausted,
.PN ftw
returns zero.
If
.I fn\^
returns a nonzero value,
.PN ftw
stops its tree traversal and returns whatever
value was returned by
.IR fn .
If
.PN ftw
detects an error, it returns
\-1, and sets the error type in
.IR errno .
.PP
The
.PN ftw
subroutine
uses one file descriptor for each level in the tree.
The
.I depth\^
argument limits the number of file descriptors so used.
If
.I depth\^
is zero or negative, the effect is the same as if it were 1.
The
.I depth\^
must not be greater than the number of file descriptors currently
available for use.
The
.PN ftw
subroutine will run more quickly if
.I depth\^
is at least as large as the number of levels in the tree.
.SH Restrictions
Because
.PN ftw
is recursive, it is possible for it to terminate with a memory
fault when applied to very deep file structures.
.br
It could be made to run faster and use less storage on deep
structures at the cost of considerable complexity.
.br
The
.PN ftw
subroutine uses 
.MS malloc 3
to allocate dynamic storage during its operation.
If
.PN ftw
is forcibly terminated, such as by
.I longjmp\^
being executed by
.I fn\^
or an interrupt routine,
.PN ftw
will not have a chance to free that storage,
so it will remain permanently allocated.
A safe way to handle interrupts is to store
the fact that an interrupt has occurred,
and arrange to have
.I fn\^
return a nonzero value at its next invocation.
.SH Diagnostics
.TP 15
[EACCES] 
Search permission is denied on a component of \fIpath\fP or read
permission is denied for path.
.TP
[ENAMETOOLONG]
The length of the path string exceeds {PATH_MAX}, or
a pathname component is longer than {NAME_MAX}.
.TP
[ENOENT]
The path argument points to the name of a file which
does not exist, or to an empty string and the environment
defined is POSIX or SYSTEM_FIVE.
.TP
[ENOTDIR]
A component of \fIpath\fP is not a directory.
.TP
[ENOMEM]
Not enough memory was available to complete the file tree
walk.
.SH See Also
stat(2), malloc(3)
