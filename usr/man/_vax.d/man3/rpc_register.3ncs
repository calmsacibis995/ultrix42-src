.TH rpc_register 3ncs
.SH Name
rpc_register \- register an interface (server only)
.SH Syntax
.nf
#include <idl/c/rpc.h>

void rpc_$register(\fIifspec, epv, status\fP)
rpc_$if_spec_t *\fIifspec\fP;
rpc_$epv_t \fIepv\fP;
status_$t *\fIstatus\fP;
.fi
.\".SH SYNOPSIS (PASCAL)
.\".DS
.\"\fB%include '/usr/include/idl/pas/rpc.ins.pas'\fR
.\"
.\"\fBprocedure rpc_$register(\fR
\"	\fBin \fIifspec\fB: rpc_$if_spec_t;\fR
.\"	\fBin \fIepv\fB: rpc_$epv_t;\fR
.\"	\fBout \fIstatus\fB: status_$t);\fR
.\".DE
.SH Arguments
.TP 20
\fIifspec\fR
The interface being registered. 
.TP 20
\fIepv\fR
The entry point vector (EPV) for the operations in the interface.
The EPV is always defined in the server stub that is generated by
the NIDL compiler from an interface definition.
.TP 20
\fIstatus\fR
The completion status.  
If the completion status returned in
.PN status\&.all
is equal to
.B status_$ok ,
then the routine that supplied it was successful.
.SH Description
The 
.PN rpc_$register
routine registers an interface with the RPC
runtime library.  After an interface is registered,
the RPC runtime library will pass requests for that interface to the server.
.NXR "Interface to the Remote Procedure Call" "rpc_register"
.PP
You can call 
.PN rpc_$register
several times with the same interface
(for example, from various subroutines of the same server),
but each call must specify the same EPV.
Each registration increments a reference count for the registered interface;
an equal number of 
.PN rpc_$unregister
routines are then required to unregister
the interface.
.SH Examples
The following statement registers the bank interface with the bank server
host's RPC runtime library:
.EX
rpc_$register (&bank_$if_spec, bank_$server_epv, &status);
.EE
.SH Diagnostics
This section lists status codes for errors returned by this
.PN rpc_$
routine in
.PN status\&.all .
.TP 20
\fBrpc_$op_rng_error\fR
The requested operation does not correspond to a valid operation 
in the requested interface.
.TP 20
\fBrpc_$too_many_ifs\fR
The maximum number of interfaces is already registered with the RPC runtime library;
the server must unregister some interface before it registers an additional interface.
.TP 20
\fBrpc_$not_in_call\fR
An internal error.
.TP 20
\fBrpc_$you_crashed\fR
This error can occur if a server has crashed and restarted.
A client RPC runtime library sends the error to the server
if the client makes a remote procedure call before the server crashes,
then receives a response after the server restarts.
.TP 20
\fBrpc_$proto_error\fR
An internal protocol error.
.TP 20
\fBrpc_$illegal_register\fR
You are trying to register an interface that is already registered 
and you are using an EPV different from
the one used when the interface was first registered.
An interface can be multiply registered,
but you must use the same EPV in each 
.PN rpc_$register
routine.
.TP 20
\fBrpc_$bad_pkt\fR
The server or client has received an ill-formed packet.
.SH Files
.PN /usr/include/idl/c/rpc.h
.br
.PN /usr/include/idl/rpc.idl
.SH See Also
intro(3ncs), rpc_register_mgr(3ncs), rpc_register_object(3ncs), rpc_unregister(3ncs)
