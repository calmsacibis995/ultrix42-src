.\" SCCSID: @(#)varargs.3	8.1	9/11/90
.TH varargs 3 
.SH Name
varargs \- variable argument list
.SH Syntax
.B "#include <varargs.h>"
.PP
.I function\c
.RB ( va_alist )
.br
.B va_dcl
.br
.B va_list
.IR pvar ;
.br
.B va_start\c
.RI ( pvar );
.br
f =
.B va_arg\c
.RI ( pvar ,
.IR type );
.br
.B va_end\c
.RI ( pvar );
.SH Description
.NXR "varargs subroutine"
.NXR "argument list" "portable procedures for variable"
This set of macros provides a means of writing portable procedures that
accept variable argument lists.
Routines having variable argument lists, such as
.MS printf 3s ,
that do not use varargs are inherently nonportable, since different
machines use different argument passing conventions.
.PP
.B va_alist
is used in a function header to declare a variable argument list.
.PP
.B va_dcl
is a declaration for
.BR va_alist .
Note that there is no semicolon after
.B va_dcl.
.PP
.B va_list
is a type which can be used for the variable
.IR pvar ,
which is used to traverse the list.
One such variable must always be declared.
.PP
.B va_start\c
.RI (pvar)
is called to initialize
.I pvar
to the beginning of the list.
.PP
.B va_arg\c
.RI ( pvar ,
.IR type )
will return the next argument in the list pointed to by
.IR pvar .
The
.I type
is the type the argument is expected to be.
Different types can be mixed, but it is up
to the routine to know what type of argument is
expected, since it cannot be determined at runtime.
.PP
.B va_end\c
.RI ( pvar )
is used to finish up.
.PP
Multiple traversals, each bracketed by
.B va_start
\&...
.B va_end,
are possible.
.SH Examples
.NXR "varargs subroutine" "example"
.EX
#include <varargs.h>
execl(va_alist)
va_dcl
{
	va_list ap;
	char *file;
	char *args[100];
	int argno = 0;

	va_start(ap);
	file = va_arg(ap, char *);
	while (args[argno++] = va_arg(ap, char *))
	B;
	va_end(ap);
	return execv(file, args);
}
.EE
.SH Restrictions
.NXR "varargs subroutine" "restrictions"
It is up to the calling routine to determine how many arguments
there are, since it is not possible to determine this from the
stack frame.  For example,
.PN execl
passes a 0 to signal the end of the list.
The
.PN printf
command can tell how many arguments are supposed to be there by the format.







