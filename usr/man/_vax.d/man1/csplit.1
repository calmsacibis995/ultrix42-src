.TH csplit 1
.SH Name
csplit \- context split
.SH Syntax
.B csplit
[ \fB\-s\fR ] [ \fB\-k\fR ] [ \fB\-f \fIprefix\fR ]
\fIfile\fR \fIarg1\fR [ \fI...argn\fR ]
.SH Description
.NXR "csplit command"
The
.PN csplit
command reads
.I file
and separates it into n+1 sections, as
defined by the arguments
.I arg1...argn.
By default, the sections are placed in
xx00...xxn
(\fIn\fR may not be greater than 99).
The named
.I file
is sectioned in the following way:
.TP 6
00:
From the start of
.I file
up to (but not including) the line referenced by
.I arg1.
.TP 6
01:
From the line referenced by
.I arg1
up to the line referenced by
.I arg2.
.RS 6
.B "."
.br
.B "."
.br
.B "."
.RE
.TP 6
n:
From the line referenced by
.I argn
to the end of
.I file.
.RE
.PP
If the
.I file
argument is a minus (\-)
then standard input is used. A minus is an ASCII octal 055.
.PP
.SH Options
.TP 20
.B \-s
Suppresses the printing of all character counts.  If the 
.B \-s
option is omitted, the
.PN csplit
command prints the character counts for each file created.
.TP
.B \-k
Leaves previously created files intact.  If the 
.B \-k
option is omitted, 
.PN csplit
automatically removes created files if an error occurs.
.TP
.BI \-f prefix
Names the created files
.I prefix00...prefixn.
The default is \fIxx00...xxn\fR.
.RE
.PP
The arguments
(\fIarg1...argn\fR)
to
.PN csplit
can be a combination of the following:
.RS 6
.TP 20
/\fIrexp\fR/[\fIoffset\fR]
A file is created for the section from the current line
up to (but not including) the line containing the regular expression
.IR rexp .
The current line becomes the line containing
.IR rexp .
The optional \fIoffset\fR is 
plus (+) or minus (\-) the number of lines.
For example, /Page/\-5.
.TP 20
%\fIrexp\fR%[\fIoffset\fR]
This argument is the same as
/\fIrexp\fR/[\fIoffset\fR],
except that no file is created for the section.
.TP 20
.I lnno
A file is created from the current line up to (but not including)
.IR lnno.
The current line becomes
.IR lnno.
.TP 20
.RI { num }
Repeat argument.
This argument may follow any of the above arguments.
If it follows a
.I rexp
argument, that argument is applied
.I num
more times.
If it follows
.IR lnno,
the file will be split every
.I lnno
lines
.RI ( num
times)
from that point.
.RE
.PP
Enclose all
.I rexp
type arguments that contain blanks or other characters meaningful to
the Shell in the appropriate quotes.
Regular expressions should not contain embedded new-lines.
The
.PN csplit
command does not affect the original file;
it is the user's responsibility to remove it.
.SH Examples
.EX 0
csplit \-f cobol file /procedure division/ /par5./ /par16./
.EE
This example creates four files, cobol00...cobol03.
After editing the files that
.PN csplit
created, they can be recombined as follows:
.EX
cat cobol0[0\-3] > file
.EE
Note that this example overwrites the original file.
.sp
.EX 
csplit \-k file\ \ 100\ \ {99}
.EE
This example splits the file every 100 lines, up to
10,000 lines.
The
.B \-k
option causes the created files to be retained if there
are less than 10,000 lines; however, an error message would
still be printed.
.sp
.EX
csplit \-k prog.c\ \ \(fm%main(%\(fm\ \ \(fm/^}/+1\(fm\ \ {20}
.EE
Assuming that
.PN prog.c
follows the normal C coding convention of
ending routines with a right brace
(\fB}\fR)
at the beginning of the line,
this example creates a file containing each separate
C routine (up to 21) in
.PN prog.c .
.SH Diagnostics
The diagnostics are self explanatory except for the following:
.EX
arg \- out of range
.EE
This message means that the given argument did not reference a line
between the current position and the end of the file.
.SH See Also
ed(1), sh(1)
