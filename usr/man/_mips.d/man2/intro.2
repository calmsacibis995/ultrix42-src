.\" SCCSID: @(#)intro.2	3.1	11/23/87
.TH intro 2
.SH Name
intro \- introduction to system calls 
.SH Syntax
.B #include <errno.h>
.SH Description
.NXR "intro(2) keyword"
.NXR "system call" "introduction"
.NXAM "system call" "\fIspecific system calls\fP"
Section 2 describes the ULTRIX system calls, which are the
entries into the ULTRIX kernel.  In this section, reference
pages with the extension 2yp are specific to the
Yellow Pages (YP) service.  Those pages ending in 2nfs are specific 
to the Network File System (NFS) service.
.PP
Additionally, some Section 2 reference pages contain an ENVIRONMENT 
section that describes differences between the POSIX or SYSTEM V 
environment and the ULTRIX operating system.
.SH Environmental Compatibility
.NXR "system call" "specifying System V environment"
.NXR "system call" "specifying POSIX environment"
Some system calls contain System V and POSIX features that
are compatible with ULTRIX programs.  These
features are provided for applications that are being
ported from System V or POSIX.
Occasionally, the System V and POSIX features conflict with features 
present in the ULTRIX system.  For example, a function
performed under the ULTRIX operating system can produce
different results in the System V or POSIX environment.  If
conflicts exist, the ENVIRONMENT section of the reference page highlights these
differences.
.PP
Neither the System V compatibility features nor the POSIX
compatibility features are not contained in the standard C
runtime library. To use the compatibility features, you must set your 
programming environment to System V
or POSIX 
when you compile or link your programs.  To set the System V or
POSIX
environment, do either of the following:
.IP 1. 5
Use the 
.I \-Y
option for the 
.PN cc 
command. For example, the following demonstrates compiling a program in
the System V environment first, and then in the POSIX environment:
.EX
% cc \-YSYSTEM_FIVE program.c
% cc \-YPOSIX program.c
.EE
.IP 2. 5
Globally set the environment variable PROG_ENV to
SYSTEM_FIVE or to POSIX.  
.sp
If you are using the C shell,
execute the following line or include it 
in your 
.PN .login 
file:
.EX
setenv PROG_ENV SYSTEM_FIVE  
.EE
Replace ``SYSTEM_FIVE'' with ``POSIX'' if you are using the POSIX 
environment.
.sp
If you are using the Bourne or the System V shell, execute the
following line or include it in your 
.PN .profile 
file:
.EX
PROG_ENV=POSIX ; export PROG_ENV
.EE
Replace ``POSIX'' with ``SYSTEM_FIVE'' if you are using the System V
environment.
.LE
.PP
In each instance, the 
.PN cc
command defines a preprocessor symbol, either SYSTEM_FIVE or POSIX.  
When the SYSTEM_FIVE symbol is defined, the C preprocessor,
.PN cpp ,
selects the System V data structures and symbol definitions. When the
POSIX symbol is defined,
.PN cpp
selects the POSIX data structures and symbol
definitions. 
.PP
In addition, if 
.PN cc 
invokes the 
.PN ld
linker, it resolves references to routines by searching the System V version of the
Standard C library (
.PN libcV.a
)  or the POSIX version of the Standard C library (
.PN libcP.a
) before it searches
.PN libc.a .
The linker searches 
.PN libcV.a
when the SYSTEM_FIVE symbol is defined. It searches
.PN libcP.a
when POSIX is defined.
.PP
In the System V environment, if you specify the
.I \-lm 
option on either the 
.PN cc
or the 
.PN ld  
command line, the linker includes the System V math library, 
instead of the ULTRIX math library, in your program.
.SH Return Values
Most system calls have one or more return values.
An error condition is indicated by an otherwise impossible return
value.  This value is usually \-1.
When a function returns an error condition, it also stores an error number in 
the external variable 
.PN errno .
This variable is not cleared on successful calls.  Thus, you should
test
.PN errno 
only after an error has occurred.
.PP
All return codes and values from
functions are of type 
.I int
unless otherwise noted.
.PP
For a list of the errors and their
names as given in <errno.h>, see the
.MS errno 2 
reference page.
.SH Definitions
The following terms are used in Section 2:
.TP 5
Descriptor
.br
An integer assigned by the system when a file is referenced
by 
.PN open ,
.PN dup ,
.PN pipe ,
or a socket is referenced by 
.PN socket   
or 
.PN socketpair 
The descriptor uniquely identifies an access path to that file or socket from
a given process or any of its children.
.TP 5
Directory
.br
A directory is a special type of file that contains
references to other files, called links.
By convention, a directory
contains at least two links called 
dot (.) and dot-dot (..).  Dot refers to the directory itself 
and dot-dot refers to its parent directory.
.TP 5
Effective User Id, Effective Group Id, and Access Groups
.br
Access to system resources is governed by the 
the effective user ID, the effective group ID, and the
group access list.
.IP 
The effective user ID and effective group ID are initially the
process's real user ID and real group ID respectively.  Either
can be modified through execution of a set-user-ID or set-group-ID
file, or possibly by one of its ancestors.  For more information, see
.MS execve 2 .
.IP
The group access list is an additional set of group IDs
used only in determining resource accessibility.  Access checks
are performed as defined under the term File Access Permissions.
.TP
File Access Permissions
.br
Every file in the file system has a set of access permissions.
These permissions are used in determining whether a process
may perform a requested operation on the file, such as opening
a file for writing.  Access permissions are established at the
time a file is created.  They can be changed with the 
.PN chmod 
call. 
.IP
File access is separated into three types: read, write, and
execute.  Directory files use the execute
permission to control whether or not the directory can be searched.
.IP
File access permissions are interpreted by the system as
they apply to three different classes of users: the owner
of the file, those users in the file's group, and anyone else.
Every file has an independent set of access permissions for
each of these classes.  When an access check is made, the system
decides if permission should be granted by checking the access
information applicable to the caller.
.IP
Read, write, and execute/search permissions on
a file are granted to a process in the following instances:
.RS 10
.IP \(bu 5
The process's effective user ID is that of the superuser.
.IP \(bu 5
The process's effective user ID matches the user ID of the owner
of the file and the owner permissions allow the access.
.IP \(bu 5
The process's effective user ID does not match the user ID of the
owner of the file, but either the process's effective
group ID matches the group ID
of the file or the group ID of the file is in
the process's group access list
and the group permissions allow the access.
.IP \(bu 5
Neither the effective user ID nor the effective group ID
and group access list of the process
match the corresponding user ID and group ID of the file,
but the permissions for other users allow access.
.RE
.IP
Read, write, and execute/search permissions on a file are not
granted, as follows:
.RS 10
.IP \(bu 5
If the process is trying to execute an image and the file
system is mounted no execute, execute permission is denied.  
.IP \(bu 5
If the process's effective UID is not root, the
process is attempting to access a character or block special
device, and the file system is mounted with nodev, 
access is denied.
.IP \(bu 5
If the process's effective UID is not root, the process is trying
to execute an image with the
.I setuid
or
.I setgid
bit
set in the file's permissions, and the file system is mounted
nosuid, execute permission is denied.
.RE
.TP 5
File Name
.br
Names consisting of up to {FILENAME_MAX} characters can be used to name
an ordinary file, special file, or directory.
.IP
These characters can be selected from the set of all ASCII characters
excluding null (0) and the ASCII code for backslash (\\\).  
The parity bit (bit 8) must be 0.
.IP
Avoid using asterisks (*), question marks (?), or brackets ([ ])
as part of filenames because of the special meaning attached to these 
characters by the shell.
.TP 5
Message Operation Permissions
.br
In the 
.MS msgop 2 
and 
.MS msgctl 2
system call descriptions, the permission required for an
operation is specified by a token. The token argument is
the type of permission needed and it is interpreted as follows:
.EX
00400    Read by user
00200    Write by user
00060    Read, Write by group
00006    Read, Write by others
.EE
Read and write permissions are granted to a process if
one or more of the following are true:
.RS 10
.IP \(bu 5
The effective user ID of the process is superuser.
.IP \(bu 5
The effective user ID of the process matches
.I msg_perm.[c]uid
in the data structure associated with
msqid and the appropriate bit of the user portion
(0600) of
.I msg_perm.mode
is set.
.IP \(bu 5
The effective user ID of the process does not match
.I msg_perm.[c]uid, 
but
the effective group ID of the process matches
.I msg_perm.[c]gid
and the appropriate bit of the group portion (060)
of
.I msg_perm.mode
is set.
.IP \(bu 5
The effective user ID of the process does not match
.I msg_perm.[c]uid
and the effective group ID of the process does not match
.I msg_perm.[c]gid, 
but
the appropriate bit of the other portion (06) of
.I msg_perm.mode
is set.
.RE
.IP
If none of the previous conditions are true, the read and write
permissions are denied.
.TP 5
Message Queue Identifier
.br
A message queue identifier (msqid) is a unique positive integer
created by a 
.PN msgget 
system call.  Each msqid has a message queue and a data
structure associated with it.  The data structure is referred
to as
.I msqid_ds
and contains the following members:
.EX 0
struct  ipc_perm msg_perm; /*operation permission struct*/
ushort  msg_qnum;          /*number of msgs on q*/
ushort  msg_qbytes;        /*max number of bytes on q*/
ushort  msg_lspid;         /*pid of last msgsnd operation*/
ushort  msg_lrpid;         /*pid of last msgrcv operation*/
time_t  msg_stime;         /*last msgsnd time*/
time_t  msg_rtime;         /*last msgrcv time*/
time_t  msg_ctime;         /*last change time*/
                           /*Times measured in secs since*/
                           /*00:00:00 GMT, Jan.1, 1970*/
.EE
The
.I msg_perm
structure is an 
.I ipc_perm 
structure that specifies the message operation
permission.  The 
.I msg_perm 
structure includes the following
members:
.EX
ushort  cuid;     /*creator user id*/
ushort  cgid;     /*creator group id*/
ushort  uid;      /*user id*/
ushort  gid;      /*group id*/
ushort  mode;     /*r/w permission*/
.EE
The
.I msg_qnum
member is the number of message currently on the queue.
The
.I msg_qbytes
member is the maximum number of bytes allowed on the queue.
The
.I msg_lspid
member is the process ID of the last process that performed a
.PN msgrcv 
operation.
The
.I msg_lrpid
member is the process ID of the last process that performed a
.PN msgop
operation.
The
.I msg_stime
member is the time of the last
.PN msgop 
operation, 
.I msg_rtime
is the time of the last
.PN msgrcv
operation, and
.I msg_ctime
is the time of the last 
.PN msgctl 
operation that changed a member of the above structure.
.TP 5
Parent process ID
.br
A new process is created by a currently active process.  For further
information, see 
.MS fork 2 .
The parent process ID of a process is the process ID of its creator.
.TP 5
Pathname
.br
A pathname is a null-terminated character string containing an 
optional slash (/), followed by zero or more directory names separated
by slashes.  This sequence can optionally be followed by another slash
and a filename.
The total length of a pathname must be less
than {PATHNAME_MAX} characters.
.IP
If a pathname begins with a slash, the path search begins at the
.PN root
directory.
Otherwise, the search begins from the current working directory.
A slash by itself names the 
.PN root 
directory.  A null
pathname refers to the current directory.
.TP 5
Process ID
.br
Each active process in the system is uniquely identified by a positive
integer called a process ID.  The range of this ID is from
0 to {PROC_MAX}.
.TP 5
Process Group ID
.br
Each active process is a member of a process group that is identified by
a positive integer called the process group ID.  This is the process
ID of the group leader.  This grouping permits the signaling of related
processes.  For more information, see 
.MS killpg 2
and the job control mechanisms described in 
.MS csh 1 .
.TP 5
Real User ID and Real Group ID
.br
Each user on the system is identified by a positive integer
called the real user ID.
.IP
Each user is also a member of one or more groups. 
One of these groups is distinguished from others and
used in implementing accounting facilities.  The positive
integer corresponding to this group is called
the real group ID.
.IP
All processes have a real user ID and real group ID.
These are initialized from the equivalent attributes
of the parent process. 
.TP 5
Root Directory and Current Working Directory
.br
Each process has associated with it a concept of a root directory
and a current working directory for the purpose of resolving path
name searches.  A process's root directory does not need to be
the root directory of the root file system.
.TP 5
Semaphore Identifier
.IP
A semaphore identifier (semid) is a unique positive integer
created by a 
.PN semget 
system call.  Each semid has a set of semaphores and a
data structure associated with it.  The data structure
is referred to as
.I semid_ds
and contains the following members:
.EX 0
struct  ipc_perm sem_perm; /*operation permission struct*/
ushort  sem_nsems;         /*number of sems in set */
time_t  sem_otime;         /*last operation time*/
time_t  sem_ctime;         /*last change time*/
                           /*Times measured in secs since*/
                           /*00:00:00 GMT, Jan. 1, 1970*/
.EE
The
.I sem_perm
is an 
.I ipc_perm 
structure that specifies the semaphore
operation permission.  This structure includes
the following members:
.EX 0
ushort cuid;  /*creator user id*/
ushort cgid;  /*creator group id*/
ushort uid;   /*user id*/
ushort gid;   /*group id*/
ushort mode;  /*r/a permission*/
.EE
The value of
.I sem_nsems
is equal to the number of semaphores in the set.  Each
semaphore in the set is referenced by a positive integer
referred to as a
.I sem_num.
The
.I sem_num 
values run sequentially from 0 to the value of
sem_nsems minus 1.
The
.I sem_otime
member is the time of the last 
.PN semop 
operation, and
.I sem_ctime
is the time of the last 
.PN semctl 
operation that changed a member of the above structure.
.IP
A semaphore is a data structure that contains the following
members:
.EX 0
ushort  semval;  /*semaphore value*/
short   sempid;  /*pid of last operation*/
ushort  semncnt; /*# awaiting semval > cval*/
ushort  semzcnt; /*# awaiting semval = 0*/
.EE
The
.I semval
member is a non-negative integer.
The
.I sempid
member is equal to the process ID of the last
process that performed a semaphore operation on this
semaphore.
The
.I semncnt
member is a count of the number of processes that are currently
suspended awaiting this semaphore's semval to become greater
than its current value.
The
.I semzcnt
member is a count of the number of processes that are currently suspended
awaiting this semaphore's semval to become zero.
.TP 5
Semaphore Operation Permissions
.IP
In the 
.MS semop 2
and
.MS semctl 2
system call descriptions, the permission required for an operation
is specified as {token}.  The token argument is the type of permission
needed and it is interpreted as follows:
.EX
00400   Read by user
00200   Alter by user
00060   Read, Alter by group
00006   Read, Alter by others
.EE
Read and alter permissions on a semid are granted to a process
if one or more of the following are true:
.RS 10
.IP \(bu 5
The effective user ID of the process is superuser.
.IP \(bu
The effective user ID of the process matches
.I sem_perm.[c]uid
in the data structure associated with
semid
and the appropriate bit of the user portion (0600) of
.I sem_perm.mode
is set.
.IP \(bu
The effective user ID of the process does not match
.I sem_perm.[c]uid,
but the effective group ID of the process matches
.I sem_perm.[c]gid
and the appropriate bit of the group portion (060) of
.I sem_perm.mode
is set.
.IP \(bu
The effective user ID of the process does not match
.I sem_perm.[c]uid
and the effective group ID of the process does not match
.I sem_perm.[c]gid,
but the appropriate bit of the other portion (06) of
.I sem_perm.mode 
is set.
.RE
.IP 
If none of the previous conditions are true, the read and alter
permissions are denied.
.TP 5
Session
.IP
Each process group is a member of a session. A process is considered
to be a member of the session of which its process group is a member.
Typically there is one session per login.
.TP 5
Shared Memory Identifier
.IP
A shared memory identifier (shmid) is a unique positive
integer created by a 
.PN shmget 
system call.  Each shmid has a segment of memory (referred
to as a shared memory segment) and a data structure associated
with it.  The data structure is referred to as
.PN shmid_ds
and contains the following members:
.EX 0
struct  ipc_perm shm_perm;  /*operation permission struct*/
int     shm_segsz;          /*size of segment*/
ushort  shm_cpid;           /*creator pid*/
ushort  shm_lpid;           /*pid of last operation*/
short   shm_nattch;         /*number of current attaches*/
time_t  shm_atime;          /*last attach time*/
time_t  shm_dtime;          /*last detach time*/
time_t  shm_ctime;          /*last change time*/
                            /*Times measured in secs since*/
                            /*00:00:00 GMT, Jan. 1, 1970*/
.EE
The
.I shm_perm
member is an 
.I ipc_perm
structure that specifies the shared
memory operation permission.  This structure
includes the following members:
.EX 0
ushort  cuid;  /*creator user id*/
ushort  cgid;  /*creator group id*/
ushort  uid;   /*user id*/
ushort  gid;   /*group id*/
ushort  mode;  /*r/w permission*/
.EE
The
.I shm_segz
member specifies the size of the shared memory segment.
The
.I shm_cpid
member is the process ID of the process that created the shared
memory identifier.
The
.I shm_lpid
member is the process ID of the last process that performed
a 
.PN shmop 
operation.
The
.I shm_nattch
member is the number of processes that currently have this segment
attached.  
The
.I shm_atime
member is the time of the last
.PN shmat
operation,
.I shm_dtime
is the time of the last
.PN shmdt
operation, and
.I shm_ctime
is the time of the last 
.PN shmctl 
operation that changed one of the members of the above
structure.
.TP 5
Shared Memory Operation Permissions
.IP
In the 
.MS shmop 2 
and
.MS shmctl 2
system call descriptions, the permission required for an
operation is given as {token}.  The token argument is the
type of permission needed and it is interpreted as follows:
.EX
00400  Read by user
00200  Write by user
00060  Read, Write by group
00006  Read, Write by others
.EE
Read and write permissions on a shmid are granted to a
process if one or more of the following are true:
.RS 10
.IP \(bu 5
The effective user ID of the process is superuser.
.IP \(bu 5
The effective user ID of the process matches
.I shm_perm.[c]uid
in the data structure associated with shmid
and the appropriate bit of the
user portion (0600) of
.I shm_perm.mode 
is set.
.IP \(bu 5
The effective user ID of the process does not match
.I shm_perm.[c]uid,
but the effective group ID of the process matches
.I shm_perm.[c]gid
and the appropriate bit of the group portion (060)
of
.I shm_perm.mode
is set.
.IP \(bu 5
The effective user ID of the process does not match
.I shm_perm.[c]uid
and the effective group ID of the process does not match
.I shm_perm.[c]gid,
but the appropriate bit of the other portion (06) of
.I shm_perm.mode
is set.
.RE
.IP
If none of the previous conditions are true, the read and write 
permissions are denied.
.TP 5
Sockets and Address Families
.IP
A socket is an endpoint for communication between processes.
Each socket has queues for sending and receiving data.
.IP
Sockets are typed according to their communications properties.
These properties determine whether messages sent and received
at a socket require the name of the partner, if communication
is reliable, and if the format is used in naming message
recipients.
.IP
Each instance of the system supports some
collection of socket types.  See
.MS socket 2
for more information about the types available and
their properties.
.IP
Each instance of the system supports some number of sets of
communications protocols.  Each protocol set supports addresses
of a certain format.  An Address Family is the set of addresses
for a specific group of protocols.  Each socket has an address
chosen from the address family in which the socket was created.
.TP 5
Special Processes
.br
Those processes that have a process ID of 0, 1, and 2 are considered
special processes.  Process 0 is the scheduler.  Process 1 is the 
initialization process 
.IR init ,
and is the ancestor of every other process in the system.
It controls the process structure.
Process 2 is the paging daemon.
.TP 5
Superuser
.br
A process is recognized as a superuser process and is granted
special privileges if its effective user ID is 0.
.TP 5
tty Group ID
.br
Each active process can be a member of a terminal group
that is identified by a positive integer called the tty group ID.  
This grouping is used to arbitrate between multiple jobs contending 
for the same terminal.  For more information, see 
.MS csh 1  
and 
.MS tty 4 .
.SH See Also
cc(1), csh(1), tty(4), intro(3), perror(3)
