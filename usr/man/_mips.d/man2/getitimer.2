.\" SCCSID: @(#)getitimer.2	3.2	12/15/87
.TH getitimer 2
.SH Name
getitimer, setitimer \- get or set value of interval timer
.SH Syntax
.nf
.ft B
#include <sys/time.h>
.PP
.ft B
#define ITIMER_REAL   	0	/* real time intervals */
#define ITIMER_VIRTUAL	1	/* virtual time intervals */
#define ITIMER_PROF   	2	/* user and system virtual time */
.sp
.ft B
getitimer(which, value)
int which;
struct itimerval *value;
.PP
.ft B
setitimer(which, value, ovalue)
int which;
struct itimerval *value, *ovalue;
.fi
.SH Description
.NXR "getitimer system call"
.NXR "setitimer system call"
.NXR "interval timer" "getting value"
.NXR "interval timer" "setting value"
The system provides each process with three interval timers,
defined in <sys/time.h>.
The
.PN getitimer
call returns the current value for the timer specified in
.IR which ,
while the
.PN setitimer
call sets the value of a timer (optionally, returning the previous
value of the timer).
The upper limit for time values are as follows:
.sp
.in 1.0i
For VAX machines, 10millisec * 0x7fffffff  (about 256 days)
.br
For RISC machines, 3.906 millsec * 0x7fffffff (about 97 days)
.in -1.0i
.PP
A timer value is defined by the 
.I itimerval
structure:
.EX 0
struct itimerval {
      struct  timeval it_interval; /* timer interval */
      struct  timeval it_value;    /* current value */
};
.EE
.PP
If
.I it_value
is nonzero, it indicates the time to the next timer expiration. 
If
.I it_interval
is nonzero, it specifies a value to be used in reloading 
.I it_value
when the timer expires.
Setting 
.I it_value
to 0 disables a timer.  Setting 
.I it_interval
to 0 causes a timer to be disabled after its next expiration (assuming
.I it_value
is nonzero).
.PP
Time values smaller than the resolution of the
system clock are rounded up to this resolution
(on MIPS, 3.906 milliseconds; on VAX, 10 milliseconds).
.PP
The ITIMER_REAL timer decrements in real time.  A SIGALRM signal is
delivered when this timer expires.
.NXR "interval timer" "types"
.PP
The ITIMER_VIRTUAL timer decrements in process virtual time.
It runs only when the process is executing.  A SIGVTALRM signal
is delivered when it expires.
.PP
The ITIMER_PROF timer decrements both in process virtual time and
when the system is running on behalf of the process.  It is designed
to be used by interpreters in statistically profiling the execution
of interpreted programs.
Each time the ITIMER_PROF timer expires, the SIGPROF signal is
delivered.  Because this signal may interrupt in-progress
system calls, programs using this timer must be prepared to
restart interrupted system calls.
.PP
Three macros for manipulating time values are defined in <sys/time.h>.
The
.I timerclear
sets a time value to zero,
.I timerisset
tests if a time value is nonzero, and
.I timercmp
compares two time values (beware that >= and <= do not
work with this macro).
.SH Return Values
If the calls succeed, a value of 0 is returned.  If an error occurs,
the value \-1 is returned, and a more precise error code is placed
in the global variable, \fIerrno\fP.
.SH Diagnostics
The possible errors are:
.TP 15
[EFAULT]
The \fIvalue\fP structure specified a bad address.
.TP 15
[EINVAL]
A \fIvalue\fP structure specified a time that was too large
to be handled.
.SH See Also
gettimeofday(2), sigvec(2), pause(3)
