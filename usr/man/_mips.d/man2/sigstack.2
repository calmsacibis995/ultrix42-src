.\" SCCSID: @(#)sigstack.2	8.1	9/11/90
.TH sigstack 2
.SH Name
sigstack \- set or get signal stack context
.SH Syntax
.nf
.B #include <signal.h>
.PP
.B struct sigstack {
.B	caddr_t	ss_sp;
.B	int	ss_onstack;
.B };
.PP
.B sigstack(\fIss, oss\fP)
.B struct sigstack *\fIss, *oss\fP;
.SH Description
.NXR "sigstack system call" 
.NXR "signal stack" "getting context"
.NXR "signal stack" "setting context"
The
.PN sigstack
system call
allows users to define an alternate stack on which signals
are to be processed.  If
.I ss
is nonzero,
it specifies a
.I "signal stack"
on which to deliver signals
and tells the system if the process is currently executing
on that stack.  When a signal's action indicates its handler
should execute on the signal stack (specified with a
.PN sigvec 
call), the system checks to see
if the process is currently executing on that stack.  If the
process is not currently executing on the signal stack,
the system arranges a switch to the signal stack for the
duration of the signal handler's execution. 
If
.I oss
is nonzero, the current signal stack state is returned.
.PP
Signal stacks are not grown'automatically, as is
done for the normal stack.  If the stack overflows,
unpredictable results may occur.
.SH Return Values
Upon successful completion, a value of zero (0) is returned.
Otherwise, a value of \-1 is returned and 
.I errno
is set to indicate the error.
.SH Diagnostics
The
.PN sigstack
system call
fails and the signal stack context remains unchanged,
if one of the following occurs.
.TP 15
[EFAULT]
Either
.I ss
or
.I oss
points to memory that is not a valid part of the process
address space.
.SH See Also
sigvec(2), setjmp(3)
