.\" SCCSID: @(#)memory.3	8.1	9/11/90
.TH memory 3
.SH Name
memccpy, memchr, memcmp, memcpy, memmove, memset \- memory operations
.SH Syntax
.nf
.B #include <string.h> 
.PP
.B void *memccpy (\fIs1, s2, c, n\fP)
.B void *\fIs1\fP, *\fIs2\fP;
.B int \fIc\fP;
.B size_t \fIn\fP;
.PP
.B void *memchr (\fIs, c, n\fP)
.B void *\fIs\fP;
.B int \fIc\fP;
.B size_t \fIn\fP;
.PP
.B int memcmp (\fIs1, s2, n\fP)
.B void *\fIs1\fP, *\fIs2\fP;
.B size_t \fIn\fP; 
.PP
.B void *memcpy (\fIs1, s2, n\fP)
.B void *\fIs1\fP, *\fIs2\fP;
.B size_t \fIn\fP; 
.PP
.B void *memset (\fIs, c, n\fP)
.B void *\fIs\fP;
.B int \fIc\fP;
.B size_t \fIn\fP;
.PP
.B void *memmove (\fIs1, s2, n\fP)
.B void *\fIs1, *s2\fP;
.B size_t \fIn\fP;
.fi
.SH Description
.NXR "memory keyword"
.NXR "memccpy subroutine"
.NXR "memchr subroutine"
.NXR "memcmp subroutine"
.NXR "memcpy subroutine"
.NXR "memmove subroutine"
.NXR "memset subroutine"
.NXR "memory" "operations"
.NXR "memory area" "defined"
These functions operate efficiently on memory areas
(arrays of characters bounded by a count, not 
terminated by a null character).
They do not check for the overflow of any receiving memory area.
.PP
The
.PN memccpy
subroutine
copies characters from memory area
.I s2\^
into
.IR s1 ,
stopping after the first occurrence of character
.I c\^
has been copied, or after
.I n\^
characters have been copied, whichever comes first.
It returns a pointer to the character after
the copy of
.I c\^
in
.IR s1 ,
or a
NULL
pointer if
.I c\^
was not found in the first
.I n\^
characters of
.IR s2 .
.PP
The
.PN memchr
subroutine
returns a pointer to the first
occurrence of character 
.I c\^
in the first
.I n\^
characters of memory area
.IR s ,
or a
NULL
pointer if
.I c\^
does not occur.
.PP
The
.PN memcmp
subroutine compares its arguments, looking at the first
.I n\^
characters only, and returns an integer
less than, equal to, or greater than 0,
according as
.I s1\^
is lexicographically less than, equal to, or
greater than
.IR s2 .
.PP
The
.PN memcpy
subroutine copies
.I n\^
characters from memory area
.I s2\^
to
.IR s1 .
It returns
.IR s1 .
.PP
The
.PN memmove
subroutine is like
.PN memcpy
,
except that if s1 and s2 specify overlapping areas, 
.PN memmove
works as if an intermediate buffer is used. 
.PP
The
.PN memset
subroutine
sets the first
.I n\^
characters in memory area
.I s\^
to the value of character
.IR c .
It returns
.IR s .
.SH Restrictions
.NXR "memccpy subroutine" "restrictions"
The
.PN memcmp
subroutine uses native character comparison, which is signed
on PDP\-11s,
unsigned on other machines.
.PP
Character movement is performed differently in
different implementations of 
.PN memccpy
and
.PN memcpy .
Thus overlapping moves, using these subroutines, 
may yield unpredictable results.
