.TH kerberos 3krb
.SH Name
kerberos \- Kerberos authentication library routines
.SH Syntax
.nf
.nj
 \fB#include <des.h>
 #include <krb.h>\fP
.PP
 \fBint krb_mk_req\fP(\fItkt_authen_out, f_service, f_instance,
                         f_realm, checksum\fP)
 \fBKTEXT\fP	\fItkt_authen_out;\fP
 \fBchar\fP		\fI*f_service;\fP
 \fBchar\fP		\fI*f_instance;\fP
 \fBchar\fP		\fI*f_realm;\fP
 \fBu_long\fP		\fIchecksum;\fP
.PP
 \fBint krb_rd_req\fP(\fItkt_authen_in, l_service, l_instance,
                         f_hostaddr, ad, srvtab_file\fP)
 \fBKTEXT\fP	\fItkt_authen_in;\fP
 \fBchar\fP		\fI*l_service;\fP
 \fBchar\fP		\fI*l_instance;\fP
 \fBu_long\fP		\fIf_hostaddr;\fP
 \fBAUTH_DAT\fP	\fI*ad;\fP
 \fBchar\fP		\fI*srvtab_file;\fP
.ig ++
.PP
 \fBint krb_kntoln\fP(\fIad,lname\fP)
 \fBAUTH_DAT\fP	\fI*ad;\fP
 \fBchar\fP		\fI*lname;\fP
.++
.ig ++
.PP
 \fBint krb_set_key\fP(\fIkey,cvt\fP)
	\fBchar\fP		\fI*key;\fP
	\fBint\fP		\fIcvt;\fP
.++
.PP
 \fBint krb_get_cred\fP(\fIf_service, f_instance, 
                          f_realm, cred\fP)
 \fBchar\fP		\fI*f_service;\fP
 \fBchar\fP		\fI*f_instance;\fP
 \fBchar\fP		\fI*f_realm;\fP
 \fBCREDENTIALS\fP	\fI*cred;\fP
.ig ++
.PP
 \fBlong krb_mk_priv\fP(\fIin, out, in_length, schedule,\fP
                        \fIkey, sender, receiver\fP)
 \fBu_char\fP			\fI*in;\fP
 \fBu_char\fP			\fI*out;\fP
 \fBu_long\fP			\fIin_length;\fP
 \fBC_Block\fP	\fI*key;\fP
 \fBKey_schedule\fP		\fIschedule;\fP
 \fBstruct	sockaddr_in\fP	\fI*sender;\fP
 \fBstruct	sockaddr_in\fP	\fI*receiver;\fP
.PP
 \fBlong krb_rd_priv\fP(\fIin, in_length, schedule, key,\fP
                        \fIsender, receiver, msg_data\fP)
 \fBu_char\fP			\fI*in;\fP
 \fBu_long\fP			\fIin_length;\fP
 \fBKey_schedule\fP		\fIschedule;\fP
 \fBC_Block\fP		\fI*key;\fP
 \fBstruct	sockaddr_in\fP	\fI*sender;\fP
 \fBstruct	sockaddr_in\fP	\fI*receiver;\fP
 \fBMSG_DAT\fP		\fI*msg_data;\fP
.++
.PP
 \fBlong	krb_mk_safe\fP(\fIin, out, in_length, key,\fP
                               \fIl_addr, f_addr\fP)
 \fBu_char\fP		\fI*in;\fP
 \fBu_char\fP		\fI*out;\fP
 \fBu_long\fP			\fIin_length;\fP
 \fBC_Block\fP		\fI*key;\fP
 \fBstruct 	sockaddr_in\fP	\fI*l_addr;\fP
 \fBstruct	sockaddr_in\fP	\fI*f_addr;\fP
.PP
 \fBlong	krb_rd_safe\fP(\fIin, in_length, key, f_addr,\fP
                               \fIl_addr, msg_data\fP)
 \fBu_char\fP		\fI*in;\fP
 \fBu_long\fP			\fIin_length;\fP
 \fBC_Block\fP		\fI*key;\fP
 \fBstruct	sockaddr_in\fP	\fI*f_addr;\fP
 \fBstruct	sockaddr_in\fP 	\fI*l_addr;\fP
 \fBMSG_DAT\fP		\fI*msg_data;\fP
.PP
.fi
.SH Arguments
.TP 10
.I f_service
Character pointer to the primary name of the foreign principal.  The local
principal is the principal that calls the routines listed above.  The 
local principal tries to 
communicate with the foreign principal. 
.TP
.I f_instance
Character pointer to the instance name of the foreign principal.
.TP
.I f_realm
Character pointer to the realm name of the foreign principal.
.TP
.I l_service
Character pointer to the primary name of the local principal.
.TP
.I l_instance
Character pointer to the instance name of the local principal.
.TP
.I tkt_authen_out
Pointer to the text structure in which the Kerberos library routines
build the ticket-authenticator pair.  This structure is designed to be
sent to the foreign principal to authenticate the local principal's 
identity to the foreign principal.  Storage must be allocated 
for \fItkt_authen_out\fP.
.TP
.I tkt_authen_in
Pointer to the ticket-authenticator pair that the Kerberos library uses to authenticate
the foreign principal to the local principal.  The data in this structure must
have been generated by a call to
.PN krb_mk_req
by the foreign principal and transmitted by the foreign principal to the local principal.
.TP
.I checksum
The \fIchecksum\fP parameter is input to
.PN krb_mk_req .
It is packaged with the ticket-authenticator pair that is sent to the foreign principal.
The \fIchecksum\fP serves as a secret piece of data that can be known only 
to the foreign principal if
the foreign principal is authenticated as the foreign principal.  It is used to facilitate
mutual authentication with
.PN krb_sendmutual
and
.PN krb_recvmutual . 
See 
.PN krb_sendmutual(3krb)
for information about these two routines.
.TP
.I f_hostaddr
Address of the machine from which the foreign principal sent 
the \fItkt_authen_in\fP data.
.TP
.I f_addr
Address of the socket that the foreign principal is using to communicate with the local
principal.
.TP
.I l_addr
Address of the socket that the local principal is using to communicate with 
the foreign principal.
.TP
.I ad
Pointer to the AUTH_DAT structure that describes the authentication
association between the local
and foreign principals.  The \fIad\fP structure is output from
.PN krb_rd_req .
You must allocate space for the \fIad\fP structure.
.TP
.I srvtab_file 
The path name of the file that contains the key of the 
principal obtaining a
ticket. 
If this value is set equal to a string of zero length,
.PN srvtab_file[0] ='\\\\0', 
the default service table (srvtab) file is used.  If
this value is set equal to the NULL 
pointer, then the key of the
service is not read from the srvtab file, but is read from storage
space internal to the libraries.  The \fIsrvtab_file\fP parameter
cannot be set equal to the NULL string on the first call to
.PN krb_rd_req .
The default srvtab file value is set to
.PN /etc/srvtab ,
although this value can be changed by a call to the
.PN krb_set_srvtab_string
function.  (See the
.PN krb_set_tkt_string(3krb)
reference page).
.TP
.I key
Pointer to the C_Block input to
.PN krb_mk_safe
and
.PN krb_rd_safe .
It contains a Data Encryption Standard (DES) key.  The
key that is usually used is the session key between the local and foreign principal.
.TP
.I cred
A pointer to a credentials structure that is allocated by the caller of
.PN krb_get_cred
and filled with data by
.PN krb_get_cred .
The credentials structure includes the ticket that the local principal
uses to authenticate the foreign principal.  It also includes other
authentication information associated with the foreign principal.
.TP
.I in
Character pointer to the user data that must be included in a safe message.
.TP
.I out
Character pointer to the safe message output by
.PN krb_mk_safe .
The \fIin\fP parameter may not overlap with \fIout\fP. 
.TP
.I in_length
Length of the user data, \fIin\fP. 
.TP
.I msg_data
The \fImsg_data\fP parameter is a pointer to a MSG_DAT structure which must be
allocated by the caller of
.PN krb_rd_safe
and which is filled by
.PN krb_rd_safe
with information about the safe message.  A pointer to the user data sent within
the safe message is also included in \fImsg_data\fP.
.SH Description
.NXR "Kerberos routines" "kerberos 3"
.NXR "Kerberos routines" "krb_mk_req"
.NXR "Kerberos routines" "krb_rd_req"
.NXR "Kerberos routines" "krb_get_cred"
.NXR "Kerberos routines" "krb_mk_safe"
.NXR "Kerberos routines" "krb_rd_safe"
The
.PN krb_mk_req
calls are designed to be used by two principals that are attempting to
authenticate themselves for the first time as well as by two principals
that have authenticated once, but wish to authenticate all data passed
between them.
.PP
The
.PN krb_mk_req
and
.PN krb_rd_req
routines are designed to be used by applications that communicate over a 
network, require the
authentication of both parties across the communication path, and support
"on-the-wire"
protocols in which authentication data can be placed. 
These routines perform only the authentication of the first message sent between
such applications.
.PN krb_mk_req
creates a ticket-authenticator pair that can be included in the "on-the-wire" protocol
of an application, and
.PN krb_rd_req
reads the ticket-authenticator pair.
.PP
The
.PN krb_mk_safe
and
.PN krb_rd_safe
routines are used by applications that require that every message passed between
them be authenticated and free from unauthorized modifications, and whose "on-the-wire"
protocol has no room for authentication data.  These routines only provide for
the 
authentication and integrity protection of a message if the first authenticated
message has already been sent by the
.PN krb_mk_req/krb_rd_req
pair or the
.PN krb_sendauth/krb_recvauth
pair.  See
.PN krb_sendauth(3krb)
for more information about the latter pair.
.PP
The 
.PN krb_mk_safe
routine encapsulates user data inside the
.PN krb_mk_safe
"on-the-wire" message authentication protocol. 
.PN krb_rd_safe
can interpret the message authentication protocol and the message, and return the
data encapsulated by
.PN krb_mk_safe .
Since any application which is modified to use 
.PN krb_mk_safe
or
.PN krb_rd_safe
must encapsulate its "on-the-wire" protocol within the "on-the-wire" protocol
of
.PN krb_mk_safe , 
the application must develop a method of distinguishing between the old and new
"on-the-wire" protocols.
.PP
The
.PN des_quad_cksum
routine (see
.PN des_crypt(3krb) )
can be used to provide some of the guarantees of the
.PN krb_mk_safe
and
.PN krb_rd_safe
routines without encapsulating the protocol of the application. 
.PP
The routines of this library make extensive use of the following locally
defined data types: KTEXT, AUTH_DAT, CREDENTIALS, C_Block, and
MSG_DAT.  For specific information on the definitions of these data types, see
the
.PN des.h
and
.PN krb.h
files.
.SH Routines and Structures
.IP krb_mk_req
.PP
Used to produce the data necessary to authenticate a principal "A" to a
principal "B".  It takes as input a checksum and the primary name, instance name,
and realm name of the service to which the principal "A" is attempting to
authenticate itself.  
.PN krb_mk_req
outputs a text structure in which the ticket to communicate with principal "B"
and an authenticator have been combined to form a ticket-authenticator pair.
.PP
The application "A" must pass the ticket-authenticator pair to the principal "B"
where it can be read by
.PN krb_rd_req .
Once the ticket-authenticator pair has been read and verified, "A" has been 
authenticated to "B".  Unless an attacker possesses the session key contained in
the ticket, the attacker will be unable to modify or replay the ticket-authenticator
pair.
.PP
The checksum can be used with
.PN krb_sendmutual
and
.PN krb_recvmutual
to provide for the authentication of "B" to "A" after
.PN krb_rd_req
authenticates "A" to "B".  Although the checksum value can be any value known
only to "A", it is recommended that the checksum value used differ every time
.PN krb_mk_req
is called.
The following is a list of the return values from
.PN krb_mk_req
and, if they are error codes, their possible cause:
.TP 15
KFAILURE
.PN /etc/krb.conf
file (see
.PN krb.conf(5krb) )
cannot be opened, or it is not properly formed.
.TP 15
NO_TKT_FIL
The ticket file does not exist.
.TP 15
TKT_FIL_ACC
The ticket file cannot be opened or the ticket file cannot be accessed.
.TP 15
TKT_FIL_LCK
The ticket file could not be locked for access.
.TP 15
TKT_FIL_FMT
The ticket file format is incorrect.
.TP 15
AD_NOTGT
There is no ticket-granting ticket in the ticket file that can be used to ask
for a ticket to communicate with the foreign principal.
.TP 15
SKDC_CANT
A Kerberos server must be contacted so that
.PN krb_mk_req
can perform its function, but the attempt cannot be made because a socket
cannot be opened or bound, or because there is no Kerberos server listed in
.PN /etc/krb.conf .
.TP 15
SKDC_RETRY
A Kerberos server needs to be contacted, but none responded even after several
attempts.
.TP 15
INTK_PROT
Kerberos protocol error.
.TP 15
KSUCCESS
All went well.
.sp 1 
.IP krb_rd_req
.PP
This routine is used to read the authentication data produced by principal "A"
with
.PN krb_mk_req
and sent by "A" to principal "B".  It takes as input the primary name and instance name
of the local principal "B", as well as the authentication data sent to "B", the address
of the machine from which "A" sent the ticket-authenticator pair, and the name of the
file in which to find the key of the local principal.
If the authentication attempt is successful,
.PN krb_rd_req
will fill the \fIad\fP structure with data about the authenticated association 
between "A" and "B".
.PP
The \f(CWkrb_rd_req\fP routine returns zero (RD_AP_OK) upon successful
authentication.  If a packet was forged, modified, or replayed,
then
authentication fails.
.PP
The following is a list of the error values returned from 
.PN krb_mk_req
and their possible causes:
.TP 16
RD_AP_VERSION
The versions of 
Kerberos
used by the caller of
.PN krb_mk_req
is incompatible with the
.PN krb_rd_req
version.
.TP 16
RD_AP_MSG_TYPE
The ticket-authenticator pair given to
.PN krb_rd_req
was not actually a ticket-authenticator pair.
.TP 16
RD_AP_UNDEC
The ticket was indecipherable.  This error can be caused by a forged or a
modified message.
.TP 16
RD_AP_INCON
The message given to
.PN krb_rd_req
contains an internal inconsistency.  This could occur if the ticket in the
ticket-authenticator pair does not match the authenticator.
.TP 16
RD_AP_BADD
The ticket-authenticator pair cannot be used from the address, \fIf_hostaddr\fP.
.TP 16
RD_AP_TIME
The authenticator in the ticket-authenticator pair is too old to be used to 
authenticate the foreign principal.
.TP 16
RD_AP_NYV
The time at which the ticket of the ticket-authenticator pair was created, 
is too far
ahead of the time of the local host of the local principal.
.TP 16
RD_AP_EXP
The ticket is too old to be used.
.ig ++
.IP krb_kntoln
Converts a Kerberos name to a local name.  The routine and uses the
\fIpname\fP and \fIpinst\fP fields of the AUTH_DAT structure to
reference the database 
.PN /etc/aname  
and find the corresponding local name (\fIlname\fP) of the service.  The
local name is returned and can be used by an application to change
uids, directories, or other parameters.  The
.PN krb_kntoln
routine is provided to support the use of Kerberos in existing utilities.
.++
.ig ++
.IP krb_set_key
Uses a Data Encryption Standard (DES) key (\fI*key\fP) to create a key
schedule and saves the original key to be used by the application as an
initialization vector. It is used to set the key that the server uses
to decrypt tickets.
.IP
If called with a non-zero second argument (\fIcvt\fP),
.PN krb_set_key
converts the input from a string of arbitrary length to a DES key by
encrypting it with a one-way function.
.IP
In most cases it should not be necessary to call
.PN krb_set_key .
The necessary keys are usually obtained and set inside
.PN krb_rd_req.  
The
.PN krb_set_key
routine is provided for applications that do not wish to place the
application keys on disk.
.++
.sp 1
.IP krb_get_cred
.PP
Searches the caller's ticket file for
the authentication information associated with the principal specified by the
\fIf_service\fP, \fIf_instance\fP, and \fIf_realm\fP. 
If
.PN krb_get_cred
finds information in the ticket file, it fills a credentials structure
with the information and returns the status, GC_OK.
.PP
The following is a list of the error values returned from
.PN krb_mk_req
and their possible causes:
.TP 15
NO_TKT_FIL
The ticket file does not exist.
.TP 15
TKT_FIL_ACC
The ticket file cannot be opened or the ticket file cannot be accessed.
.TP 15
TKT_FIL_LCK
The ticket file could not be locked for access.
.TP 15
TKT_FIL_FMT
The ticket file format is incorrect.
.TP 15
GC_NOTKT
Information concerning the principal does not exist in the ticket file.
.sp 1
.IP krb_mk_safe
.PP
Creates an authenticated but unencrypted message from text pointed to
by \fIin\fP, of a length indicated by \fIin_length\fP. The routine uses
the private session key (\fI*key\fP) to seed the checksum
algorithm, \f(CWdes_quad_cksum\fP, that it uses as part of the authentication
process. (For more information about
.PN des_quad_cksum ,
see the 
.PN des_crypt(3krb)
reference page.)  The
.PN krb_mk_safe
routine also uses the arguments \fIl_addr\fP and \fIf_addr\fP for
authentication purposes.
.PP
A safe message does not provide privacy, but does provide protection
against modifications in addition to providing authentication.  The encapsulated message
and header produced by \f(CWkrb_mk_safe\fP are placed in the area
pointed to by \fIout\fP. The routine returns the length of
the output or a negative one (\-1), indicating an error.
.sp 1
.IP krb_rd_safe
.PP
Authenticates a received
.PN krb_mk_safe
message and writes the appropriate fields in the message data structure
\fBMSG_DAT\fP. The argument \fIin\fP points to the beginning of the
received message. The argument \fIin_length\fP specifies the length of
the message. The \f(CWkrb_rd_safe\fP routine uses the private session
key (\fI*key\fP) to seed the 
.PN des_quad_cksum
routine (see the
.PN des_crypt(3krb)
reference page) as part of its 
authentication process. The routine fills in the following
\fBMSG_DAT\fP fields: 
.PP
.TS
tab(@);
l c
l l.
MSG_DAT Field@Description
.sp 4p
\f(CWapp_data\fR@Pointer to the application data
\f(CWapp_length\fR@Length of the \f(CWapp_data\fP
\f(CWtime_sec\fR@Timestamp of the message in seconds
\f(CWtime_5ms\fR@Timestamp of the message in 5-millisecond units
\f(CWswap\fR@T{
A 1 if the byte order of the receiver is different from that of
the sender
T}
.TE 
.PP
Note that the application must still determine if it is appropriate to
byte-swap application data; the Kerberos protocol fields are already
taken care of.
.PP
The
.PN krb_rd_safe
routine returns RD_AP_OK if the message, \fIin\fP, is authenticated and has
not been modified when it was sent between the foreign and the local
principal.  It is up to
the caller to check the time sequence of messages and to check against
recently replayed messages.
The following is a list of the error values returned by
.PN krb_rd_req
and their possible causes:
.TP 16
-1
A system call used by 
.PN krb_rd_safe
returned an error.
.TP 16
RD_AP_VERSION
The Kerberos version of the
.PN krb_mk_safe
code that generated message, \fIin\fP, is not supported by the
.PN krb_rd_safe
version used.
.TP 16
RD_AP_MSG_TYPE
The message, \fIin\fP, is not really a message produced by
.PN krb_mk_safe .
.TP 16
RD_AP_MODIFIED
The address of the machine from which \fIin\fP was sent does not match the
address of the machine on which the
.PN krb_mk_safe
message, \fIin\fP, was generated, or
.br
The message was modified when it was sent from the foreign to the local
principal, or
.br
The message, \fIin\fP, is too small to be the message produced by
.PN krb_mk_req .
.TP 16
RD_AP_TIME
The difference between the time at which the message, \fIin\fP, was produced
by
.PN krb_mk_req
and the time at which it was read by
.PN krb_rd_req
is too large.  The time difference must be within five minutes.
.ig ++
.IP krb_mk_err
Constructs an application level error message that may be used along
with the
.PN krb_mk_priv
and the
.PN krb_mk_safe
routines. The argument \fIout\fP is a pointer to the output buffer,
\fIcode\fP is an application specific error code, and \fIstring\fP
is an application specific error string.
.IP krb_rd_err
Routine unpacks a received
.PN krb_mk_err
message and writes the appropriate fields in the message structure
\fBMSG_DAT\fP. The argument \fIin\fP points to the beginning of the
received message. The message length is specified by \fIin_length\fP.
The argument \fIcode\fP is a pointer to a value to be filled in with
the error value provided by the application. The argument
\fI*msg_data\fP is a pointer to the structure MSG_DAT. The routine
writes the following \fBMSG_DAT\fP fields:
.PP
.TS
tab(@);
c c
l l.
MSG_DAT Field@Description
.sp 4p
\f(CWapp_data\fR@Pointer to the application data
\f(CWapp_length\fR@Length of the \f(CWapp_data\fP
\f(CWswap\fR@T{
A 1 if the byte order of the receiver is different from that of the
sender
T}
.TE 
.PP
.IP 
The 
.PN krb_rd_err
routine returns zero if the error message has been successfully received,
or a Kerberos error code.
.++
.SH Restrictions
The caller of the functions,
.PN krb_rd_req
and
.PN krb_rd_safe ,
must check the time
order of messages and protect against replay attempts. 
.SH Files
.TP
.PN /usr/include/krb.h
.TP
.PN /usr/lib/libkrb.a
.TP
.PN /usr/include/des.h
.TP
.PN /usr/lib/libdes.a
.TP
.PN /etc/srvtab
.SH See Also
des_crypt(3krb), krb_sendmutual(3krb), krb_sendauth(3krb), krb_svc_init(3krb),
krb_set_tkt_string(3krb), krb.conf(5krb)
