.TH nidl 1ncs
.SH Name
nidl \- Network Interface Definition Language Compiler
.SH Syntax
\fBnidl\fR \fIfilename\fR [\fIoptions\fR]
.SH Description
The
.PN nidl
compiler is
for the Network Interface Definition Language (NIDL).
.NXR "Network Interface Definition Language Compiler" "nidl"
.PP
The \fIfilename\fR argument is
the pathname of an interface definition file,
written in
.\"either
the C syntax
.\"or the Pascal syntax
of NIDL.
.PP
The compiler generates a header file, a client stub file, a server stub
file, and a client switch file, all in C source code.  The compiler
derives the names of these output files from \fIfilename\fR by replacing
the suffix (the rightmost period and all subsequent characters) with
extensions for the client stub, server stub, and client switch.
.SH Options
.TP 20
\fB\-confirm\fR
Display the options chosen but do not compile anything.
In displaying information about \fB\-idir\fR,
the compiler constructs the list of all directories it would use
to resolve relative pathnames of imported files,
not just the ones explicitly supplied.
(If the list is empty,
the compiler uses only the current directory.)
This option is useful for viewing the `idir list'
and for viewing the default values for other options.
.TP 20
\fB\-cpp\fR \fIpathname\fR
Run the specified program
instead of the default C preprocessor.
You can use the \fB\-confirm\fR option to view the default pathname.
.TP 20
\fB\-def\fR \fIdef1\fR [\fIdef2\fR ...]
Pass the specified definitions to the C preprocessor.
A definition can take either of two forms:
\fIsymbol\fR or \fIsymbol\fB=\fIvalue\fR.
.TP 20
\fB\-exts\fR \fIcstub\-ext\fB,\|\fIsstub\-ext\fB,\|\fIcswtch\-ext\fR
Set the extensions that the compiler uses
to name the stub and switch files it generates.
The text strings \fIcstub\-ext\fR, \fIsstub\-ext\fR, and \fIcswtch\-ext\fR
must be separated by commas, with no spaces;
they are used as extensions
for the client stub, the server stub, and the client switch,
respectively.  You can use the \fB\-confirm\fR option to view
the defaults.
.TP 20
\fB\-f77c\fR
Generate client switch code
that is compatible with the ULTRIX
.PN f77
compiler.
The NIDL compiler appends an underscore (\fB\|_\|\fR) character
to the name of each client switch routine, so that the routines can be
called from FORTRAN programs generated by the
.PN f77
compiler.
.TP 20
\fB\-f77s\fR
Generate server stub code
that is compatible with the ULTRIX
.PN f77
compiler.
The NIDL compiler appends an underscore (\fB\|_\|\fR) character
to the name of each manager routine that the stub calls,
so that the stub can call
routines generated by the
.PN f77
compiler.
.TP 20
\fB\-idir\fR \fIdirectory1\fR [\fIdirectory2\fR ...]
Use the specified directories as paths
from which to resolve relative pathnames of imported files.
The compiler generates an ordered list of these directories.
By default, it prepends to this list your current working directory
and appends the system 
.PN idl
directory.
You can suppress this default by supplying the \fB\-no_def_idir\fR option.
.TP 20
\fB\-m\fR
Support multiple versions and multiple managers
within a single server.
This option allows a server
to export more than one version of an interface (`multiple versions') 
and to implement an interface for more than one type (`multiple managers'). 
.sp 1
The compiler appends the version number to the interface name
when it generates identifiers in the stub and header files.
For example,
the interface specifier for version 3 of the \fBfoobar\fR interface
would be \fBfoobar_v3$if_spec\fR.
.sp 1
The server for an interface compiled with \fB\-m\fR
must use 
.PN rpc_$register_mgr
to register its managers.
The server supplies the name of a manager EPV to 
.PN rpc_$register_mgr;
the manager code defines this EPV.
If the server supports objects of several types,
it must use 
.PN rpc_$register_object
to register each object.
These registrations enable the RPC runtime library at the server host
to dispatch incoming requests to the correct manager.
.sp 1
If you do not specify either
\fB\-m\fR or its counterpart, \fB\-s\fR,
the compiler assumes \fB\-s\fR and issues a warning.
However, this default may be removed or changed in future NIDL
compilers.  Even if your server exports only one version of its
interface and contains only one manager,
use the \fB\-m\fR option, so that it will be easy for you
to incorporate multiple versions and multiple managers later.
.TP 20
\fB\-no_cpp\fR
Do not run the C preprocessor on the input file.
If you specify this option,
the NIDL compiler does not interpret any C preprocessor statements
(such as
.PN #include
statements) in the interface definition.
.TP 20
\fB\-no_def_idir\fR
Do not prepend the current working directory or append the system 
.PN idl
directory to the list of directories constructed from 
.I \-idir
arguments.
If you specify \fB\-no_def_idir\fR without \fB\-idir\fR,
the compiler resolves pathnames of imported files
only relative to the current working directory.
.TP 20
\fB\-no_stubs\fR
Do not generate any stub or switch files.
The NIDL compiler generates only header files and
.\"(if the \fB\-pascal\fR option is used) 
insert files.
.TP 20
\fB\-no_warn\fR
Suppress warning messages.
.TP 20
\fB\-out\fR \fIdirectory\fR
Place the generated files in \fIdirectory\fR.
The default is the current working directory.
.\".TP 20
.\"\fB\-pascal\fR
.\"Generate a Pascal insert (\fB.ins.pas\fR) file
.\"in addition to a C header (\fB.h\fR) file.
.\"The default is to generate only a C header file.
.TP 20
\fB\-s\fR
Allow a server
to export only a single version of an interface
and to implement an interface for only a single type.
This option requests the behavior of NIDL compilers before Version 1.5,
which added support for multiple versions and multiple interfaces.
(See the \fB\-m\fR option.)
.sp .5
The server for an interface compiled with \fB\-s\fR
must use 
.PN rpc_$register
to register its interfaces.
.sp .5
If you do not specify either
\fB\-s\fR or its counterpart, \fB\-m\fR,
the compiler assumes \fB\-s\fR and issues a warning.  However, this
default may be removed or changed in future NIDL compilers.
Even if your server exports only one version of its interface and
contains only one manager, use the \fB\-m\fR option,
so that it will be easy for you
to incorporate multiple versions and multiple managers later.
.TP 20
\fB\-space_opt\fR
Reduce the size of generated stub code,
possibly at the expense of slower data marshalling.
.TP 20
\fB\-version\fR
Display the version number of the NIDL compiler
but do not compile anything or generate any output files.
.ig
\fB\-ansi\fR \" obsolete
Generate ANSI C function prototypes.
The default is to produce code that conforms to pre-ANSI C.
..
.SH See Also
uuid_gen(3ncs)
.br
\fIDECrpc Programming Guide\fP
