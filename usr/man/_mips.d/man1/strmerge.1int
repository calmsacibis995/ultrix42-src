.TH strmerge 1int
.SH Name
strmerge \- batch string replacement
.SH Syntax
.B strmerge
[
.B \-m
.I prefix
] [
.B \-p
.I patternfile
] [ 
.B \-s 
.I string
]
.I source-program...
.SH Description
.NXR "strmerge utility"
The 
.PN strmerge
command reads the strings specified in the  
message file produced by
.PN strextract
and replaces those strings with calls to the message file in the source program 
to create a new source program. The new version of source program has the same 
name as the input source program, with the prefix nl_. For example, if the 
input source program is named 
.PN prog.c , 
the output source program is named 
.PN \&nl_prog.c . 
You use this command to replace hard-coded messages 
(text strings identified by the
.PN strextract
command) with calls to the 
.PN catgets 
function and to create a source message catalog file. The source message 
catalog contains the text for each message extracted from your input source
program. The 
.PN strmerge
command names the file by appending .msf to the name of the input source 
program. For example, the source message catalog for the 
.PN prog.c 
program is named
.PN prog.msf .
You can use the source message catalog as input to the 
.PN gencat
command.
.PP
At run time, the program reads the message text from the message catalog. 
By storing messages in a message catalog, instead of your program, you allow 
the text of messages to be translated to a new language or modified without 
the source program being changed.
.PP
In the 
.I source-program
argument, you name one or more source programs for which you want strings
replaced. The 
.PN strmerge
command does not replace messages for source programs included using the 
.PN #include
directive. Therefore, you might want a source program and all the source
programs it includes on a single
.PN strmerge 
command line.
.PP
You can create a patterns file (as specified by 
.I patternfile
) to control how the 
.PN strmerge 
command replaces text. The patterns file is divided into several sections,
each of which is identified by a keyword. The keyword must start at the
beginning of a new line, and its first character must be a dollar sign ($).
Following the identifier, you specify a number of patterns. Each pattern
begins on a new line and follows the regular expression syntax you use in
the 
.PN ed 
editor. For more information on the patterns file, see the
.MS patterns 5int
reference page.
.SH Options
.IP \fB\-m\fR 5
Add
.I prefix
to message numbers in the output source program and source message catalog.
You can use this prefix as a mnemonic. You must process source message 
catalogs that contain number prefixes using the 
.PN gencat \-h
option.  Message numbers will be in the form:
.EX
<prefix><msg_num>
.EE
.IP
Set numbers will be in the form:
.EX
S_<prefix><set_num>
.EE 
.IP 
If you process your input source program with this option, the resulting 
source program and source message catalog may not be portable. 
For more information, see the 
\fIGuide to Developing International Software\fP.
.IP \fB-p\fP 5
Use 
.I patternfile
to match strings in the input source program. 
By default, the command searches for the pattern file
in the current directory, your home directory and finally
.PN /usr/lib/intln .
.IP
If you omit the
.PN \-p
option, the 
.PN strmerge
command uses a default patterns file that is stored in
.PN /usr/lib/intln/patterns .
.IP \fB\-s\fR 5
Write 
.I string 
at the top of the source message catalog. If you omit the
.PN \-s 
option, 
.PN strmerge
uses the string specified in the 
.PN $CATHEAD
section of the patterns file.
.SH Restrictions
You can specify only one rewrite string for all classes of pattern matches.
.PP
The 
.PN strmerge
command does not verify if the message text file
matches the source file being rewritten.
.PP
The 
.PN strmerge
command does not replace strings to files included with
.PN #include
directive. You must run the
.PN strmerge
command on these files separately.
.SH Examples
The following produces a message file
.PN prog.cat
for a program called
.PN prog.c .
.EX
% strextract \-p c_patterns prog.c prog2.c
% vi prog.msg
% strmerge \-p c_patterns prog.c prog2.c
% gencat prog.cat prog.msf
% vi nl_prog.c
% vi nl_prog2.c
% cc nl_prog.c nl_prog2.c \-li
.EE
.PP
In this example, the
.PN strextract 
command uses the 
.PN c_patterns 
file to determine which strings to match. The input source programs are named
.PN prog.c
and
.PN prog2.c .
.PP
If you need to remove any of the messages or extract one of the created strings, edit the 
resulting message file, 
.PN prog.msg .
Under no conditions should you add to this file. Doing so could result in 
unpredictable behavior.
.PP
You issue the 
.PN strmerge
command to replace the extracted strings with calls to the message catalog.
In response to this command, 
.PN strmerge 
creates the source message catalogs,
.PN prog.msf
and 
.PN prog2.msf ,
and the output source programs,
.PN nl_prog.c
and 
.PN nl_prog2.c .
.PP
Before compiling the source programs, you must edit 
.PN nl_prog.c
and
.PN nl_prog2.c
to include the appropriate 
.PN catopen
and 
.PN catclose
function calls.
.PP
The 
.PN gencat
command creates a message catalog and the 
.PN cc
command creates an executable program.
.SH See Also
intro(3int), extract(1int), gencat(1int), strextract(1int), trans(1int),
regex(3), catopen(3int), catgets(3int), patterns(5int)
.br
\fIGuide to Developing International Software\fP
